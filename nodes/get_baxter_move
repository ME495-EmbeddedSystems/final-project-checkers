#!/usr/bin/env python

import rospy
from checkers.play_checkers import CheckersAI, Board
import numpy as np

if __name__ == '__main__':
    rospy.init_node('get_baxter_move')
    print('RULES: Grid squares start counting from Baxter\'s left corner (Ex. 3,3 = third column and third row from Baxter\'s left corner)\nDark player gos first. \
    If you double jump, put only the start position and the goal position after the double jump. \n')
    #   this side is for player whos turn it its
    state = [-1, 0,-1, 0,0, 0,0, 0,
              0, 0, 0,0, 0,0 ,0,0,
              0, 0 ,1, 0,0, 0,0, 0,
              0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0]

    '''state = [[-1, 0,-1, 0,-1, 0,-1, 0],
             [ 0,-1, 0,-1, 0,-1 ,0,-1],
             [0, 0,-1, 0,-1, 0,-1, 0],
             [ 0, 1, 0, 0, 0, 0, 0, 0],
             [ 0, 0, 0, 0, 0, 0, 0, 0],
             [ 0, 1, 0, 0, 0, 0, 0, 0],
             [ 0, 0, 0, 0, 0, 0, 0, 0],
             [ 0, 0, 0, 0, 0, 0, 0, 0]]'''
    #board = Board(state)
    ai = CheckersAI()
    best_move = ai.minimax(state)

    '''player = raw_input('Enter Baxter\'s color(Black or Red):') #in future batxer will know based on how the board is set up
    s,g,c = ai.give_command(state,player)
    #print(s,g,c)
    print('Start: [%i,%i], Goal: [%i,%i]'%(s[0]+1,s[1]+1,g[0]+1,g[1]+1))
    #for i in range(len(c)):
    #    for j in range(len(c[i])):
    #        c[i][j] += 1
    print('Captured: '+str(c))
    after_move = ai.make_move([s,g],c,state)
    print(np.array(after_move))
    ai.is_game_over(after_move)
    movelist = ai.grid_to_world([s,g],c)
    if ai.game_over:
        print('Game over')
        print(ai.winner+' is the winner!')'''
