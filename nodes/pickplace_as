#!/usr/bin/env python
"""
REFERENCE: https://github.com/ros-planning/moveit_tutorials/blob/master/doc/move_group_python_interface/scripts/move_group_python_interface_tutorial.py

DESCRIPTION: The Pick Place Action Server. This server uses MoveIt!
             to actuate a Baxter Robot to perform various actions,
             including pick and palce method, joint_goal method and
             pose_goal methods depending on the request. It does this
             using the PickPlaceAction defined in the checkers package,
             which holds various goals, each pretaining to a different action.

             Goal Types:

            home is True: sets the right arm to its predefined
            home configuration.

            camera_home is True: sets the left arm to its predefined
            home configuration

            camera_view is True: sets the left arm to its predefined
            board view configuration

            calibrate is True: sets self.count to zero to request
            a self.Tcb and self.Tsc update to calibrate the transform
            between the board frame and Baxter's world frame in an
            effort to send accurate goals.

            If none of these goals (booleans) are set to True, the pick_goal
            and place_goal [x,y] coordinates are used to perform pick and place
            actions respectively using MoveIt!'s cartesian path planner.


SUBSCRIBERS: This AS subscribes to the 'Tcb' topic, which returns the
             transformation between the left EE and the board frame as
             defined in the 'bridge' node.
"""

import rospy
import actionlib
import sys
import copy
import numpy as np
import moveit_commander
import moveit_msgs.msg
import baxter_interface
from baxter_interface import Gripper, CHECK_VERSION
import tf.transformations as tr
from geometry_msgs.msg import Point, Quaternion, Pose, PoseStamped
from checkers.msg import PickPlaceAction, PickPlaceFeedback, PickPlaceResult


class PickPlace():
    def __init__(self):
        # Initialise
        rospy.loginfo("Initializing Baxter with MoveIt...")
        # Enable baxter
        baxter_interface.robot_enable.RobotEnable()
        rospy.loginfo("Baxter Enabled!")
        # Initialize moveit_commander with kin model
        # and current joint states
        # This remap is important because otherwise it is impossible
        # to read the robot's End Effector Pose. The launchfile
        # Also must have this remap
        joint_state_topic = ['joint_states:=/robot/joint_states']
        moveit_commander.roscpp_initialize(joint_state_topic)
        # roscpp_initialize(sys.argv)
        # joint_state_topic = ['joint_states:=/joint_states_desired']
        # moveit_commander.roscpp_initialize(joint_state_topic)
        # moveit_commander.roscpp_initialize(sys.argv)
        self.robot = moveit_commander.RobotCommander()
        # Remote interface for getting, setting and updating
        # robot's belief of surroundings
        self.scene = moveit_commander.PlanningSceneInterface()
        # Interface used to execute motions
        self.move_group = moveit_commander.MoveGroupCommander("right_arm")

        # Getting Basic Information
        # Get robot reference frame name
        self.planning_frame = self.move_group.get_planning_frame()
        rospy.loginfo("========== Reference frame: %s" % self.planning_frame)
        # Get End Effector link name for this group
        self.eef_link = self.move_group.get_end_effector_link()
        rospy.loginfo("========== End effector: %s" % self.eef_link)
        # Get list of all groups in the robot
        self.group_names = self.robot.get_group_names()
        rospy.loginfo("========== Robot Groups: %s" % self.group_names)

        # DEBUG: Print Robot State
        self.robot_state = self.robot.get_current_state()
        rospy.loginfo("========== CURRENT STATE: %s" % self.robot_state)

        # Movegroup for Left Arm (Camera)
        self.cam_group = moveit_commander.MoveGroupCommander("left_arm")
        self.cam = self.cam_group.get_end_effector_link()
        # Left arm desired joints
        # 0.08590292412158317, 1.6256361399615673, -1.666670126037502, -0.08130098175792692, 2.1053886313727306, -0.23700003172829642, -1.339932218217909
        #- right_e0 - right_e1 - right_s0 - right_s1 - right_w0 - right_w1 - right_w2

        # Setup subcriber for Tcb, board to camera frame transform
        # Set queue size to 1 to get most recent data
        self.count = 0
        # Transformation from Board to Camera Frame (update in subscriber)
        self.Tcb = np.zeros((4, 4))
        self.Tcb[2, 2] = 1
        self.Tcb[3, 3] = 1
        self.pcb = [0, 0]

        self.Tsc = np.zeros((4, 4))
        self.Tsc[2, 2] = 1
        self.Tsc[3, 3] = 1
        self.psc = [0, 0]
        self.subTcb = rospy.Subscriber('Tcb',
                                       Pose,
                                       self.callback_Tcb,
                                       queue_size=1)

        # Planning and Execurtion parameters
        self.move_group.set_goal_position_tolerance(0.001)
        self.move_group.set_goal_orientation_tolerance(0.01)
        self.move_group.set_planning_time(10.0)
        self.move_group.allow_replanning(True)
        self.move_group.set_max_velocity_scaling_factor(0.5)
        self.move_group.set_max_acceleration_scaling_factor(0.5)

        # State Gripper (L, R)
        self.right_gripper = Gripper('right', CHECK_VERSION)
        # Reboot Gripper
        self.right_gripper.reboot()
        # Calibrate Gripper
        self.right_gripper.calibrate()
        # Open Gripper
        self.right_gripper.open()
        self.left_gripper = Gripper('left', CHECK_VERSION)
        # Reboot Gripper
        self.left_gripper.reboot()
        # Calibrate Gripper
        self.left_gripper.calibrate()
        # Open Gripper
        self.left_gripper.open()

        # Standoff is the amount by which we approach
        # and retreat pre and post grasp
        self.standoff = 0.1

        # z is the z position of the objects we want to grasp
        # set to the table z origin plus half the table height
        # self.z_org is the z origin
        self.z_org = -0.23  # SMALL TABLE: -0.31
        self.z = self.z_org + 0.05

        # Add table as collision object
        self.add_box()

        # Go to home position
        self.go_to_joint_state()

        # Initialise action server
        rospy.loginfo("Initialising action server...")
        self.asrv = actionlib.SimpleActionServer("pick_place_as",
                                                 PickPlaceAction,
                                                 execute_cb=self.execute_cb,
                                                 auto_start=False)
        rospy.loginfo("Action server initialised!")
        # Start action server
        self.asrv.start()

    def add_box(self, timeout=4):
        """ Adds a box to the Planning Scene
            so that Baxter knows to avoid it with
            all its links as its IK solver finds a
            solution for a given motion plan
        """
        # Add Objects to Planning Scene
        self.box_name = 'table'
        self.box_pose = PoseStamped()
        # Can reference to base frame
        # Or can reference to EE finger frame
        # for grasping
        self.box_pose.header.frame_id = "base"
        self.box_pose.pose.position.x = 0.5
        self.box_pose.pose.position.z = self.z_org
        self.box_pose.pose.orientation.w = 1.0
        # Length, Width, Height
        self.scene.add_box(self.box_name, self.box_pose, size=(1, 2, 0.1))
        # return self.wait_for_state_update(box_is_known=True, timeout=timeout)

    def go_to_joint_state(self,
                          j0=-0.96,
                          j1=0.026,
                          j2=1.56,
                          j3=1.86,
                          j4=1.48,
                          j5=-1.57,
                          j6=0.114):
        """ Sends the right arm to a specified joint configuration

            Args: j0-j6, joint values for the arm


            SMALL TABLE: j0=-0.76, j1=0.19, j2=1.23,
            j3=1.95, j4=1.244, j5=-1.33, j6=0.56
        """
        # Planning to a Joint Goal
        # Get current pose to set type
        joint_goal = self.move_group.get_current_joint_values()
        # Overwrite current pose with desired pose
        # Default pose is out of board's way
        joint_goal[0] = j0
        joint_goal[1] = j1
        joint_goal[2] = j2
        joint_goal[3] = j3
        joint_goal[4] = j4
        joint_goal[5] = j5
        joint_goal[6] = j6
        # Execute Goal
        self.move_group.go(joint_goal, wait=True)

        # Calling ``stop()`` ensures that there is no residual movement
        self.move_group.stop()

    def cam_joint_state(self,
                        j0=0.89,
                        j1=-0.05,
                        j2=-1.64,
                        j3=1.78,
                        j4=1.57,
                        j5=1.513,
                        j6=0.124):
        """ Sends the left arm to a specified joint configuration

            Args: j0-j6, joint values for the arm
        """
        # Planning to a Joint Goal
        # Get current pose to set type
        joint_goal = self.cam_group.get_current_joint_values()
        # Overwrite current pose with desired pose
        # Default pose is out of board's way
        joint_goal[0] = j0
        joint_goal[1] = j1
        joint_goal[2] = j2
        joint_goal[3] = j3
        joint_goal[4] = j4
        joint_goal[5] = j5
        joint_goal[6] = j6
        # Execute Goal
        self.cam_group.go(joint_goal, wait=True)

        # Calling ``stop()`` ensures that there is no residual movement
        self.cam_group.stop()

    def go_to_pose_goal(self, goal=[0.5, 0.0]):
        """ This function is called to bring the EE to its
            home position, or to actuate it in case the cartesian
            planner fails to return a solution that traces the
            desired trajectory to a minimum threshold

            Args: goal, a 2-element list with an x and y
            component which comprise the goal coordinates in
            the x-y plane.

            Returns: Moves the robobt arm to (goal[0], goal[1], 0)
        """
        move_group = self.move_group
        # Planning to a Pose Goal
        # We can plan a motion for this group to a desired pose for the
        # end-effector:
        pose_goal = Pose()
        # Quaternion from Euler
        # quaternion = tr.quaternion_from_euler(0, np.pi / 2, 0, 'sxyz')
        # rospy.loginfo("QUATERNION FOUND {}".format(quaternion))
        # Make the EE point down
        pose_goal.orientation.x = 1
        pose_goal.orientation.y = 0
        pose_goal.orientation.z = 0
        pose_goal.orientation.w = 0
        pose_goal.position.x = goal[0]
        pose_goal.position.y = goal[1]
        pose_goal.position.z = 0

        # Set the pose target
        move_group.set_pose_target(pose_goal)
        # Now, we call the planner to compute the plan and execute it.
        move_group.go(wait=True)
        # Calling `stop()` ensures that there is no residual movement
        move_group.stop()
        # It is always good to clear your targets after planning with poses.
        # Note: there is no equivalent function for clear_joint_value_targets()
        move_group.clear_pose_targets()
        # For testing:
        # current_pose = self.move_group.get_current_pose().pose

    def pick_cartesian(self, goal, feedback, cal=False):
        """ Receives a pick goal and performs 4 actions after moving
            the pick arm (right) to board-side dependent home config:

            1 - Moves to a pre-grasp position (approach) in the
            x-y position of the supplied goal, but offset in the z
            axis. This is done using the plan_cartesian_path method
            which is supplied a set of waypoints linearly interpolating
            between the EE's current pose and its desired pose, with
            the final waypoint having the EE pointing down.

            2- Moves to the grasp position by changing the EE z position
            using the plan_cartesian_path method.

            3- Closes the grippers to grasp the object

            4- Moves to a post-grasp (retreat) position in the x-y position
            of the supplied goal but offset in the z axis. This is done using
            the plan_cartesian_path method.

            Note that if we force the trajectory to have the EE point down at
            each waypoint, its odds of solving are greatly reduced, so we only
            place this constraint on the last waypoint.

            Args: goal (list of two elements, x and y goal position)

            Returns: Performs approach, grasp, and retreat actions and pubs
                     completed_moves feedback in realtime
                     also returns result: "succeeded" or "compromised" for
                     result return
        """
        # Make sure gripper open
        self.right_gripper.open()
        # path_type counter, if more than one is "pose", return compromised
        comp_count = 0
        # GO TO HOME
        rospy.loginfo("================== Home ==============")
        # Go to pick_place home config
        # y below -0.15
        if goal[1] < -0.11:
            # right half of the board wrt baxter
            j0 = -0.6
            j1 = 0.123
            j2 = 1.17
            j3 = 2.58
            j4 = 1.14
            j5 = -1.5
            j6 = 1.28
            # j0 = -0.78
            # j1 = 0.264
            # j2 = 1.071
            # j3 = 2.414
            # j4 = 0.971
            # j5 = -1.48
            # j6 = 0.953
        else:
            # left half of the board wrt baxter
            j0 = 0.09395632325798159
            j1 = 0.31
            j2 = 1.23
            j3 = 2.43
            j4 = 1.08
            j5 = -1.57
            j6 = 0.233
        # SMALL TABLE
        # j0 = 0.09395632325798159
        # j1 = 0.4088058799714628
        # j2 = 1.313087554429914
        # j3 = 1.9941750242510379
        # j4 = 1.0657331523833913
        # j5 = -1.5274613695369008
        # j6 = 1.3652429012180183
        # put right arm at chosen joint config
        self.go_to_joint_state(j0, j1, j2, j3, j4, j5, j6)
        # Publish feedback
        feedback.completed_moves.append("home_start")
        self.asrv.publish_feedback(feedback)
        rospy.sleep(0.5)

        # APPROACH GOAL
        rospy.loginfo("================== Approach ==============")
        # Pass the goal and the approach z coordinate
        path_type = self.create_path(goal, self.z + self.standoff)
        if path_type == "pose":
            comp_count += 1
        # Publish feedback
        feedback.completed_moves.append("pick_approach")
        self.asrv.publish_feedback(feedback)
        rospy.sleep(0.5)

        # GRASP GOAL
        rospy.loginfo("================== Grasp ==============")
        # Pass the goal and the grasp z coordinate
        # If calibrating, put gripper slightly above board (+0.02)
        if cal is True:
            path_type = self.create_path(goal, self.z + 0.02, only_z=True)
        else:
            path_type = self.create_path(goal, self.z, only_z=True)
        if path_type == "pose":
            comp_count += 1

        # Close Gripper to grasp
        self.right_gripper.close()
        rospy.sleep(0.5)
        # Publish feedback
        feedback.completed_moves.append("pick")
        self.asrv.publish_feedback(feedback)
        rospy.sleep(0.5)
        # Non-Calibration Condition
        if cal is False:
            # RETREAT GOAL (same as approach)
            rospy.loginfo("================== Retreat ==============")
            # Pass the goal and the retreat z coordinate
            path_type = self.create_path(goal, self.z + self.standoff, only_z=True)
            if path_type == "pose":
                comp_count += 1
            # Publish feedback
            feedback.completed_moves.append("pick_retreat")
            self.asrv.publish_feedback(feedback)
            rospy.sleep(0.5)

        # Return result for Action result
        result = ""
        if comp_count == 0:
            result = "succeeded"
        else:
            result = "compromised"
        return result

    def place_cartesian(self, goal, feedback):
        """ Receives a place goal and performs 4 actions:

            1 - Moves to a pre-place position (approach) in the
            x-y position of the supplied goal, but offset in the z
            axis. This is done using the plan_cartesian_path method
            which is supplied a set of waypoints linearly interpolating
            between the EE's current pose and its desired pose, with
            the final waypoint having the EE pointing down.

            2- Moves to the place position by changing the EE z position
            using the plan_cartesian_path method.

            3- Opens the grippers to place/release the object

            4- Moves to a post-place (retreat) position in the x-y position
            of the supplied goal but offset in the z axis. This is done using
            the plan_cartesian_path method.

            Note that if we force the trajectory to have the EE point down at
            each waypoint, its odds of solving are greatly reduced, so we only
            place this constraint on the last waypoint.

            Args: goal (list of two elements, x and y goal position)

            Returns: Performs approach, grasp, and retreat actions and pubs
                     completed_moves feedback in realtime
                     also returns result: "succeeded" or "compromised" for
                     result return
        """
        # path_type counter, if more than one is "pose", return compromised
        comp_count = 0
        # APPROACH GOAL
        rospy.loginfo("================== Approach ==============")
        # Pass the goal and the approach z coordinate
        path_type = self.create_path(goal, self.z + self.standoff)
        if path_type == "pose":
            comp_count += 1
        # Publish feedback
        feedback.completed_moves.append("place_approach")
        self.asrv.publish_feedback(feedback)
        rospy.sleep(0.5)

        # RELEASE GOAL
        rospy.loginfo("================== Release ==============")
        # Pass the goal and the release z coordinate
        if goal[1] < -0.3 + self.psc[1]:
            # discard condition, z + 0.05
            path_type = self.create_path(goal, self.z + 0.05, only_z=True)
        else:
            path_type = self.create_path(goal, self.z, only_z=True)
        if path_type == "pose":
            comp_count += 1

        # Close Gripper to grasp
        self.right_gripper.open()
        rospy.sleep(0.5)
        # Publish feedback
        feedback.completed_moves.append("place")
        self.asrv.publish_feedback(feedback)
        rospy.sleep(0.5)

        # RETREAT GOAL (same as approach)
        rospy.loginfo("================== Retreat ==============")
        # Pass the goal and the release z coordinate
        path_type = self.create_path(goal, self.z + self.standoff, only_z=True)
        if path_type == "pose":
            comp_count += 1
        # Publish feedback
        feedback.completed_moves.append("place_retreat")
        self.asrv.publish_feedback(feedback)
        rospy.sleep(0.5)

        # GO TO HOME
        # rospy.loginfo("================== Home ==============")
        # # Return to away-from-board home config
        # self.go_to_joint_state()
        # # Publish feedback
        # feedback.completed_moves.append("home_finish")
        # self.asrv.publish_feedback(feedback)
        # rospy.sleep(0.5)

        # Return result for Action result
        result = ""
        if comp_count == 0:
            result = "succeeded"
        else:
            result = "compromised"
        return result

    def create_path(self, goal, z, iter=2, only_z=False):
        """ Creates list of waypoint poses that make up cartesian
            path.

            Args: goal (two-element list of an x and y position)

            z (z coordinate of the goal position, which may or may
            not contain the standoff offset)

            iter (number of waypoints in the listt)

            Returns: waypoints

            Passes: goal
        """
        # Define quaternion for pointing EE down
        quat = tr.quaternion_from_euler(-np.pi, 0, -np.pi / 2)
        # Get Current EE Pose
        ee_pose = self.move_group.get_current_pose().pose
        # Initialise list of waypoitns
        waypoints = []
        # Linearly interpolate between current and goal poses
        xiter = np.linspace(ee_pose.position.x, goal[0], iter)
        yiter = np.linspace(ee_pose.position.y, goal[1], iter)
        # z may or may not contain the standoff offset
        ziter = np.linspace(ee_pose.position.z, z, iter)
        # Set each trajectory element
        for i in range(iter):
            p = copy.deepcopy(ee_pose)
            if only_z is False:
                p.position.x = xiter[i]
                p.position.y = yiter[i]
            p.position.z = ziter[i]
            # Point Down for the final waypoint
            if i >= iter - 1:
                p.orientation.x = 1
                p.orientation.y = 0
                p.orientation.z = 0
                p.orientation.w = 0
                # Make sure correct x,y even if onlyz
                # p.position.x = xiter[i]
                # p.position.y = yiter[i]
            waypoints.append(p)
        # Now plan and move
        path_type = self.plan_cartesian_path(waypoints, goal)
        rospy.sleep(1)

        return path_type

    def plan_cartesian_path(self, waypoints, goal):
        """ Calls compute_cartesian_path method from the
            move_group object to create a constrained path
            for the EE to follow. This is done in multiple attempts
            untill a satisfactory path is found and executed. Paths
            are assessed by their completion of the desired trajectory.

            If a path is not found to a certain standard, the go_to_pose_goal
            method is instread called, which sends the EE to the goal, albeit
            with an unconstrained path. This is a worst-case scenario.

            Args: waypoints (list of poses for the EE to mmove through
            during the cartesian path)

            goal (two-element list containing an x and y position for the EE)

            Returns: creates and executes path
        """
        # Scale = -1 for python according to tutorial
        # You can plan a Cartesian path by specifying a list of waypoints
        # for the end-effector to go through:
        self.move_group.set_start_state_to_current_state()
        fraction = 0.0
        max_attempts = 200
        attempts = 0

        # Return path_type variable which tells whether cartesian planner has worked
        path_type = ""

        # Plan the Cartesian path connecting the waypoints
        # We want the Cartesian path to be interpolated at a resolution of 1 cm
        # which is why we will specify 0.01 as the eef_step in Cartesian
        # translation.  Disable jump thresh by setting it to 0.0
        # waypoints to follow, eef_step, jump_threshold
        while fraction <= 0.8 and attempts < max_attempts:
            plan, fraction = self.move_group.compute_cartesian_path(
                waypoints, 0.01, 0.0)
            if fraction >= 0.8:
                rospy.loginfo("FRACTION:")
                rospy.loginfo(fraction)
            # Increment the number of attempts
            attempts += 1
        # If we have a complete plan, execute the trajectory
        if fraction >= 0.8:
            rospy.loginfo("Path computed successfully. Moving the arm.")
            self.move_group.execute(plan, wait=True)
            path_type = "cartesian"

        else:
            rospy.logerr("Could not find valid cartesian path")
            # Go back to start
            self.go_to_pose_goal(goal)
            # self.move_group.execute(plan, wait=True)
            path_type = "pose"

        return path_type

    def get_T(self, pose):
        """ Get Transformation Matrix from Quaternion

            Args: Pose message

            Returns: Transformation Matrix
        """
        q = pose.orientation
        qt = [q.x, q.y, q.z, q.w]
        R = tr.quaternion_matrix(qt)
        p = [pose.position.x, pose.position.y]
        T = np.array([[R[0][0], R[0][1], R[0][2], pose.position.x],
                      [R[1][0], R[1][1], R[1][2], pose.position.y],
                      [R[2][0], R[2][1], R[2][2], pose.position.z],
                      [0, 0, 0, 1]])
        return T, p

    def callback_Tcb(self, pose):
        """ 'Tcb' subscriber callback
            self.Tcb is only updated when
            self.count is set to zero, i.e when a Tcb
            update is requested. The callback calls
            self.get_T() to return self.Tcb as a
            transformation matrix.

            Args: Pose message
        """
        # rospy.loginfo(pose)
        if self.count == 0:
            self.Tcb, self.pcb = self.get_T(pose)
            self.count = 1

    def execute_cb(self, goal):
        """ Action Server Callback Execution.

            Offsets the given goal to transform its reference
            from the board frame to baxter's frame. Then,
            depending on the nature of the goal, executes one
            of the following:

            home is True: sets the right arm to its predefined
            home configuration.

            camera_home is True: sets the left arm to its predefined
            home configuration

            camera_view is True: sets the left arm to its predefined
            board view configuration

            calibrate is True: sets self.count to zero to request
            a self.Tcb and self.Tsc update to calibrate the transform
            between the board frame and Baxter's world frame in an
            effort to send accurate goals.

            Args: goal, PickPlaceGoal

            Returns: Feedback and Result during and post goal completion
        """
        # First, get the Transform from EE (camera) to World
        # rospy.loginfo("EE CAM POSE")
        # rospy.loginfo(self.cam_group.get_current_pose().pose)
        # Then, from the subscriber update, get the
        # Transform from Board to EE (camera)
        # Now get Transform from Board to World
        Tsb = np.matmul(self.Tsc, self.Tcb)
        rospy.loginfo("TSB: {}".format(Tsb))
        # Now get cartesian pose of board wrt world frame
        # psb = np.array([Tsb[0, 3], Tsb[1, 3], Tsb[2, 3]])
        psb = [self.psc[0], self.psc[1]]
        # psb = [self.psc[0] + self.pcb[0], self.psc[1] + self.pcb[1]]
        rospy.loginfo("PSB: {}".format(psb))
        # Now, update goals to be absolute from World to Goal
        pick_goal = [goal.pick_goal[0], goal.pick_goal[1]]
        pick_goal[0] += psb[0]
        pick_goal[1] += psb[1]
        place_goal = [goal.place_goal[0], goal.place_goal[1]]
        place_goal[0] += psb[0]
        place_goal[1] += psb[1]
        # Feedback and Result for Action
        rospy.loginfo("Goal Received")
        rospy.loginfo("Pick Goal: {}".format(pick_goal))
        feedback = PickPlaceFeedback()
        result = PickPlaceResult()

        pick_result = ""
        place_result = ""
        # Go home if required
        if goal.home is True:
            self.go_to_joint_state()
            result.status = "home"
        # Perform Calibration if required
        elif goal.calibrate is True:
            # Get most recent coord frame Tcb
            self.count = 0
            # Get EE Pose Tsc
            self.Tsc, self.psc = self.get_T(
                self.cam_group.get_current_pose().pose)
            result.status = "calibrated"
        # Move Camera to View Position
        elif goal.camera_view is True:
            j0 = -0.813  # -0.79
            j1 = -0.717  # -0.64
            j2 = -1.456  # -1.22
            j3 = 0.711  # 0.73
            j4 = 1.044  # 0.95
            j5 = 1.951  # 1.835
            j6 = -0.85  # -0.75
            self.left_gripper.open()
            self.cam_joint_state(j0, j1, j2, j3, j4, j5, j6)
            result.status = "view"
        # Move Camera to Home Position
        elif goal.camera_home is True:
            self.left_gripper.close()
            self.cam_joint_state()
            result.status = "camera_home"
        # Perform Pick Place
        else:
            if pick_goal == place_goal:
                pick_result = self.pick_cartesian(pick_goal, feedback, cal=True)
            else:
                # Execute Pick Routine
                pick_result = self.pick_cartesian(pick_goal, feedback)

                # Execute Place Routine
                place_result = self.place_cartesian(place_goal, feedback)

            # Return result
            if pick_result == "compromised" or place_result == "compromised":
                result.status = "compromised"
            else:
                result.status = "uncompromised"
        # Return result
        self.asrv.set_succeeded(result)


if __name__ == "__main__":
    rospy.init_node("pickplace_as")
    pp = PickPlace()
    rospy.spin()