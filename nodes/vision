#!/usr/bin/env python
"""
Node to output checker piece locations based on frames from camera.
If can not see current board corners, will save previously known state.

SUBSCRIBERS: (baxter/left_hand_camera)(something like that)
             (game/turn_change)(something like that)

PUBLISHERS: checker_locations_distance and checker_locations_game (A8 through H1)

"""
import numpy as np
import cv2
import glob
import rospy
import math
print
# square width 43.5mm
SW = 43.5
# termination criteria


# Red
lower_range_red = np.array([0,173,156])
upper_range_red = np.array([180,255,255])
# Blue
lower_range_blue = np.array([65,0,0])
upper_range_blue = np.array([180,255,255])

criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Values found from camera_calibration.py
mtx = np.float32([[612.39488813,   0,         336.81987956],
                  [  0,         614.62152505, 218.09689818],
                  [  0,            0,           1         ]])
dist = np.float32([[-0.17085467,  0.5427207,  -0.0095335,  -0.00170976, -0.65820667]])
h = 480
w = 640

# Incase of
##newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))

objp = np.zeros((7*7,3), np.float32)
objp[:,:2] = np.mgrid[0:7,0:7].T.reshape(-1,2)

axis = np.float32([[3,0,0], [0,3,0], [0,0,-3]]).reshape(-1,3)


def rotate_matrix(mtx):
    # Outputs a new 64x1 vector but rotated by 90 degrees clockwise as if it
    # were an 8x8 matrix
    mtx2 = []
    for i in range(8):
        line  = [mtx[i],mtx[i+8],mtx[i+16],mtx[i+24],mtx[i+32],mtx[i+40],mtx[i+48],mtx[i+56]]
        line= line[::-1]
        for j in line:
            mtx2.append(j)
    return(np.array(mtx2))

# Dictionary to convert index to board position
board_dict = {0 : [SW*0.5,SW*7.5], 1 : [SW*1.5,SW*7.5], 2 : [SW*2.5,SW*7.5], 3 : [SW*3.5,SW*7.5], 4 : [SW*4.5,SW*7.5], 5 : [SW*5.5,SW*7.5], 6 : [SW*6.5,SW*7.5], 7 : [SW*7.5,SW*7.5],
              8 : [SW*0.5,SW*6.5], 9 : [SW*1.5,SW*6.5], 10: [SW*2.5,SW*6.5], 11: [SW*3.5,SW*6.5], 12: [SW*4.5,SW*6.5], 13: [SW*5.5,SW*6.5], 14: [SW*6.5,SW*6.5], 15: [SW*7.5,SW*6.5],
              16: [SW*0.5,SW*5.5], 17: [SW*1.5,SW*5.5], 18: [SW*2.5,SW*5.5], 19: [SW*3.5,SW*5.5], 20: [SW*4.5,SW*5.5], 21: [SW*5.5,SW*5.5], 22: [SW*6.5,SW*5.5], 23: [SW*7.5,SW*5.5],
              24: [SW*0.5,SW*4.5], 25: [SW*1.5,SW*4.5], 26: [SW*2.5,SW*4.5], 27: [SW*3.5,SW*4.5], 28: [SW*4.5,SW*4.5], 29: [SW*5.5,SW*4.5], 30: [SW*6.5,SW*4.5], 31: [SW*7.5,SW*4.5],
              32: [SW*0.5,SW*3.5], 33: [SW*1.5,SW*3.5], 34: [SW*2.5,SW*3.5], 35: [SW*3.5,SW*3.5], 36: [SW*4.5,SW*3.5], 37: [SW*5.5,SW*3.5], 38: [SW*6.5,SW*3.5], 39: [SW*7.5,SW*3.5],
              40: [SW*0.5,SW*2.5], 41: [SW*1.5,SW*2.5], 42: [SW*2.5,SW*2.5], 43: [SW*3.5,SW*2.5], 44: [SW*4.5,SW*2.5], 45: [SW*5.5,SW*2.5], 46: [SW*6.5,SW*2.5], 47: [SW*7.5,SW*2.5],
              48: [SW*0.5,SW*1.5], 49: [SW*1.5,SW*1.5], 50: [SW*2.5,SW*1.5], 51: [SW*3.5,SW*1.5], 52: [SW*4.5,SW*1.5], 53: [SW*5.5,SW*1.5], 54: [SW*6.5,SW*1.5], 55: [SW*7.5,SW*1.5],
              56: [SW*0.5,SW*0.5], 57: [SW*1.5,SW*0.5], 58: [SW*2.5,SW*0.5], 59: [SW*3.5,SW*0.5], 60: [SW*4.5,SW*0.5], 61: [SW*5.5,SW*0.5], 62: [SW*6.5,SW*0.5], 63: [SW*7.5,SW*0.5]}
# Made top left inside corner the origin based on cv2.findChessboardCorners().
# All spaces are listed going left to right and top to bottom.  (A8 first, H1 last)
board_pts = np.float32([[-0.5,-0.5,0],[.5,-0.5,0],[1.5,-0.5,0],[2.5,-0.5,0],[3.5,-0.5,0],[4.5,-0.5,0],[5.5,-0.5,0],[6.5,-0.5,0],
                        [-0.5,0.5,0],[.5,0.5,0],[1.5,0.5,0],[2.5,0.5,0],[3.5,0.5,0],[4.5,0.5,0],[5.5,0.5,0],[6.5,0.5,0],
                        [-0.5,1.5,0],[.5,1.5,0],[1.5,1.5,0],[2.5,1.5,0],[3.5,1.5,0],[4.5,1.5,0],[5.5,1.5,0],[6.5,1.5,0],
                        [-0.5,2.5,0],[.5,2.5,0],[1.5,2.5,0],[2.5,2.5,0],[3.5,2.5,0],[4.5,2.5,0],[5.5,2.5,0],[6.5,2.5,0],
                        [-0.5,3.5,0],[.5,3.5,0],[1.5,3.5,0],[2.5,3.5,0],[3.5,3.5,0],[4.5,3.5,0],[5.5,3.5,0],[6.5,3.5,0],
                        [-0.5,4.5,0],[.5,4.5,0],[1.5,4.5,0],[2.5,4.5,0],[3.5,4.5,0],[4.5,4.5,0],[5.5,4.5,0],[6.5,4.5,0],
                        [-0.5,5.5,0],[.5,5.5,0],[1.5,5.5,0],[2.5,5.5,0],[3.5,5.5,0],[4.5,5.5,0],[5.5,5.5,0],[6.5,5.5,0],
                        [-0.5,6.5,0],[.5,6.5,0],[1.5,6.5,0],[2.5,6.5,0],[3.5,6.5,0],[4.5,6.5,0],[5.5,6.5,0],[6.5,6.5,0]]).reshape(-1,3)

board_pts_1 = board_pts
board_pts_2 = rotate_matrix(board_pts_1)
board_pts_3 = rotate_matrix(board_pts_2)
board_pts_4 = rotate_matrix(board_pts_3)

prev_board_imgpts = []

# if new move
#board_state = []

cap = cv2.VideoCapture(3)
while cap.isOpened():
    board_state =[]
    ret, frame = cap.read()

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Find the chess board corners
    ret, corners = cv2.findChessboardCorners(gray, (7,7),None)

    # If found, add object points, image points (after refining them)
    board_imgpts = []
    if ret == True:
        corners2 = cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
        corners3 = []
        for i in corners2:
                corners3.append(list(i.ravel()))

        # Rotate order of square points to stay consistant with changing origin
        if corners3[0][0] < corners3[-1][0] and corners3[0][1] < corners3[-1][1]:
            board_pts = board_pts_1

        if corners3[0][0] > corners3[-1][0] and corners3[0][1] < corners3[-1][1]:
            board_pts = board_pts_2

        if corners3[0][0] > corners3[-1][0] and corners3[0][1] > corners3[-1][1]:
            board_pts = board_pts_3

        if corners3[0][0] < corners3[-1][0] and corners3[0][1] > corners3[-1][1]:
            board_pts = board_pts_4


        # Find the rotation and translation vectors.
        _, rvecs, tvecs, inliers = cv2.solvePnPRansac(objp, corners2, mtx, dist)
        R,_ = cv2.Rodrigues(rvecs)

        test_imgpts = np.float32([[250,250]]).reshape(-1,2)

        #frame = draw(frame,corners2,imgpts)
        board_imgpts, jac2 = cv2.projectPoints(board_pts,rvecs,tvecs,mtx,dist)

        prev_board_imgpts = board_imgpts

        # show square centers
        for point in board_imgpts:
            point = (point[0][0], point[0][1])
            frame = cv2.circle(frame, point, 2, (255,0,0),2)

        # List of available board squares
        checkers_imgpts = [[]]
        # Calculate distance to available board squares
        for point in test_imgpts:
            for point2 in board_imgpts:
                point2 = point2[0]
                distance = math.sqrt( ((point[0] - point2[0])**2) + ((point[1] - point2[1])**2))

    else:
        board_imgpts = prev_board_imgpts
        for point in prev_board_imgpts:
            point = (point[0][0], point[0][1])
            frame = cv2.circle(frame, point, 2, (0,0,255),2)

################################################################################

    if len(board_imgpts) > 0:
        board_imgpts_s = np.squeeze(board_imgpts)
        board_diag_dist = math.sqrt( ((board_imgpts_s[0][0] - board_imgpts_s[-1][0])**2) + ((board_imgpts_s[0][1] - board_imgpts_s[-1][1])**2))
        MIN_IMGPNT_DIST = board_diag_dist / 22.7

        # Find Red blobs
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        hsv = cv2.medianBlur(hsv, 5)

        hsv_red = cv2.inRange(hsv, lower_range_red, upper_range_red)
        # convert the grayscale image to binary image
        ret,thresh = cv2.threshold(hsv_red,127,255,0)

        rows = hsv.shape[0]

        # find contours in the thresholded image
        _, circles_red, _ = cv2.findContours(hsv_red, cv2.RETR_TREE,
        	cv2.CHAIN_APPROX_SIMPLE)
        #circles = imutils.grab_contours(circles)

        circle_count_red = 0
        checkers_impgpts_red = []
        for c in circles_red:
            # compute the center of the contour
            M = cv2.moments(c)
            if cv2.contourArea(c) > 200:
                cX = int(M["m10"] / M["m00"])
                cY = int(M["m01"] / M["m00"])
                cv2.circle(frame, (cX, cY), 5, (0, 255, 255),-1)
                circle_count_red += 1
                checkers_impgpts_red.append([cX,cY,'red'])
        """
        print ('red count')
        print circle_count_red
        print ('red imgpts')
        print checkers_impgpts_red
        """
    ########################################################################

        # Find blue blobs
        hsv_blue = cv2.inRange(hsv, lower_range_blue, upper_range_blue)


        # convert the grayscale image to binary image
        ret,thresh = cv2.threshold(hsv_blue,127,255,0)

        rows = hsv.shape[0]

        # find contours in the thresholded image
        im2, circles_blue, hierarchy = cv2.findContours(hsv_blue, cv2.RETR_TREE,
        	cv2.CHAIN_APPROX_SIMPLE)
        #circles = imutils.grab_contours(circles)

        circle_count_blue = 0
        checkers_impgpts_blue = []
        for c in circles_blue:
            # compute the center of the contour
            M = cv2.moments(c)
            if cv2.contourArea(c) > 200:
                cX = int(M["m10"] / M["m00"])
                cY = int(M["m01"] / M["m00"])
                cv2.circle(frame, (cX, cY), 5, (0, 255, 255),-1)

                circle_count_blue += 1
                checkers_impgpts_blue.append([cX,cY,'blue'])

        """
        print ('blue count')
        print circle_count_blue
        print ('blue imgpts')
        print checkers_impgpts_blue
        """
    ####################################################################

        # Calculate distance to available board squares
        min_distance_list_blue = []
        for point in checkers_impgpts_blue:
            distance_list = []
            for point2 in board_imgpts:
                point3 = point2[0]
                distance = math.sqrt( ((point[0] - point3[0])**2) + ((point[1] - point3[1])**2))
                distance_list.append(distance)
                if distance < MIN_IMGPNT_DIST:
                    index = np.where(board_imgpts == point2)
                    """
                    print('index;')
                    print index[0][0]
                    print board_dict[index[0][0]]
                    """
                    if not [board_dict[index[0][0]], 'blue'] in board_state:
                        board_state.append([board_dict[index[0][0]], 'blue'])
                    break
            min_distance_list_blue.append(min(distance_list))
        """
        print "minimum distance blue"
        print min_distance_list_blue
        """
        # Calculate distance to available board squares
        min_distance_list_red = []
        for point in checkers_impgpts_red:
            distance_list = []
            for point2 in board_imgpts:
                point2 = point2[0]
                distance = math.sqrt( ((point[0] - point2[0])**2) + ((point[1] - point2[1])**2))
                distance_list.append(distance)
                if distance < MIN_IMGPNT_DIST:
                    index = np.where(board_imgpts == point2)
                    """
                    print('index;')
                    print index[0][0]
                    print board_dict[index[0][0]]
                    """
                    if not [board_dict[index[0][0]], 'red'] in board_state:
                        board_state.append([board_dict[index[0][0]], 'red'])
                    break
            min_distance_list_red.append(min(distance_list))
        """
        print "minimum distance red"
        print min_distance_list_red
        """
    print ('board state')
    print board_state
    print ("\n")
#####################################################################
    cv2.imshow('frame',frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
